# -*- eval: (add-hook 'after-save-hook 'yankpad-reload t t) -*-
#+title: Yankpad Snippets
* Developing an Emacs package
** Public Emacs package check list
- [ ] Create a GitHub repository
- [ ] Add a CI and make it green
- [ ] Publish it to MELPA
- [ ] Announce it on Reddit
** Travis.yml for Emacs Packages                                       :src:
#+begin_src yml
language: nix

script:
  - nix-build -A byte-compile --no-out-link --quiet
  - nix-build -A checkdoc --no-out-link --quiet
  - nix-shell -A package-lint --pure --quiet

matrix:
  include:
    - os: linux
      dist: trusty

cache:
  directories:
    - /nix/store
    - /dev/shm/package-lint
#+end_src
** Nix configuration for CI
{ pkgs ? import <nixpkgs> {},
  emacs ? (import (builtins.fetchTarball "https://github.com/purcell/nix-emacs-ci/archive/master.tar.gz")).emacs-${1:25-1}
}:
let
  check-package = import (builtins.fetchTarball "https://github.com/akirak/emacs-package-checker/archive/v1.tar.gz");
in
check-package {
  inherit emacs pkgs;
  name = "${2:name}";
  src = ./.;
  targetFiles = ["$2.el"];
  emacsPackages = epkgs: (with epkgs.melpaPackages; [
    ${3:dependencies}
  ]);
}
** YAML configuration for GitHub actions
name: lint

on:
  push:
    paths-ignore:
    - '**/*.md'
    - '**/*.org'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        emacs-version:
          - emacs-25-1
          - emacs-25-1
          - emacs-25-1
          - emacs-26-1
          - emacs-26-2
          - emacs-26-3
    steps:
    - name: install nix
      uses: cachix/install-nix-action@v5
    - name: install cachix
      run: nix-env -iA cachix -f https://cachix.org/api/v1/install
    - name: enable cachix for emacs-ci
      run: cachix use emacs-ci
    - name: check if nix is installed
      run: nix-env --version
    - uses: actions/checkout@v1
    - run: nix-channel --add https://github.com/purcell/nix-emacs-ci/archive/master.tar.gz emacs-ci
    - run: nix-channel --update
    - name: Run tests
      env:
        PACKAGE: ${{ '${1:package}' }}
      run: |
        set -e
        nix-build --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A $PACKAGE.byte-compile --no-out-link --quiet ci.nix
        nix-build --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A $PACKAGE.checkdoc --no-out-link --quiet ci.nix
        nix-shell --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A $PACKAGE.package-lint --pure --quiet ci.nix
** GitHub Actions badge
[[https://github.com/akirak/${1:repo}/workflows/lint/badge.svg?branch=master][https://github.com/akirak/$1/workflows/lint/badge.svg?branch=master]]
* Syncthing
** .gitignore for Syncthing repositories
.stfolder
.stversions
*.sync-conflict-*.org
log
.org-id-locations
\#*
\.\#*

# Binary files
*.pyc
*.o

# Big directories
.vagrant
node_modules
__pycache__

# Elixir
deps
_build
** .stignore
# Version control
.git

# Temporary files created by Emacs
\#*
\.\#*
*.lock

# Big directories
.vagrant
dist
node_modules

# Virtual machines
.vagrant

# C
*.o

# node.js
node_modules

# Python
*.pyc
__pycache__

# Elixir
deps
_build
* Emacs configuration
** Simple require
#+begin_src emacs-lisp
  (akirak/require '${0:module})
#+end_src
** Empty source block                                                :key:s:
#+begin_src emacs-lisp
$0
#+end_src
** use-package with custom recipe (straight.el)
(use-package ${1:name}
  :straight (:host ${2:github} :repo "${3:repo}")
  $0)
* Templates for FOSS projects
** Footer for Org README
\* COMMENT Meta                                                 :noexport:
:PROPERTIES:
:TOC:      ignore
:END:
# The COMMENT keyword prevents GitHub's renderer from showing this entry.
# Local Variables:
# eval: (when (require (quote org-make-toc) nil t) (org-make-toc-mode t))
# End:
* Org mode configuation
** org-starter-def-capture                                             :src:cg:
#+begin_src emacs-lisp
  (org-starter-def-capture "${1:key}" "${2:title}"
    entry ${3:destination}
    "* %^{Heading}
  :PROPERTIES:
  :CREATED_TIME: \\%U
  :END:
  %?
  "
    :clock-in t :clock-resume t)
#+end_src
* Vue.js
** Basic single-file component in Vue.js (JavaScript version)
<template>
  <div>
    TODO
  </div>
</template>

<script>
export default {
};
</script>
