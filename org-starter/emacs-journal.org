#+title: Emacs Journal
#+HUGO_SECTION: post
#+HUGO_BASE_DIR: ~/arts/github/jingsi-space-blog/
#+author: Akira Komamura
* 2019-10
** 2019-10-14 Monday
*** org-entry-links
:PROPERTIES:
:CREATED_TIME: [2019-10-13 Sun 23:59]
:END:

I've created a new Emacs package named [[https://github.com/akirak/org-entry-links][org-entry-links]].
It is a trivial package that lets you choose a link in an entry in Org mode.

With this package, I can use Org mode as a bookmark manager.

I also have to reconfigure =org-protocol= which is a counterpart of this package:

#+begin_src dot :file static/org-entry-links.png
  digraph G {
          browser [label="Web browser"];
          org [label="Org mode"];
          browser -> org [label="org-protocol"];
          org -> browser [label="org-entry-links,\nC-c C-o,\nlink-hint, etc."];
  }
#+end_src

#+RESULTS:
[[file:static/org-entry-links.png]]

** 2019-10-13 Sunday
*** Reading list implemented as an Org agenda :Org__mode:org_agenda:reading:org_starter:
:PROPERTIES:
:CREATED_TIME: [2019-10-13 Sun 18:44]
:END:

I am currently trying to implement a reading list in a form of custom Org agenda command.
I have defined the command as follows, but it is subject to change:

#+begin_src emacs-lisp
  (defcustom akirak/org-reading-list-files
    (--> (org-agenda-files)
         ;; Add specific files
         (append
          (list
           (org-starter-locate-file "cpb.org" nil t)
           (org-starter-locate-file "learning.org" nil t))
          it)
         ;; Remove specific files
         (-difference
          it
          (list
           (org-starter-locate-file "setup.org" nil t)
           (org-starter-locate-file "devel.org" nil t)
           (org-starter-locate-file "admin.org" nil t)))
         (delq nil it)
         (cl-remove-duplicates it :test #'file-equal-p))
    "List of Org files possibly containing reading items."
    :type '(repeat file))

  (org-starter-add-block-agenda-command "r" "Reading list and research topics"
    `(org-ql-block '(tags "book" "@book" "reading" "@reading")
                   ((org-agenda-sorting-strategy '(priority-down deadline-up))
                    (org-super-agenda-groups
                     '((:todo "STARTED")
                       (:todo "NEXT")
                       (:priority "A")
                       (:todo "REVIEW")
                       (:todo "STOPPED")
                       (:name "Possibly not properly tagged. @reading is recommended"
                              :not (:tag "@reading")
                              :order -1)
                       (:priority "C" :order -2)
                       ;; TODO: Add your favourite categories here
                       (:tag "favourite" :tag "favorite")))
                    (org-agenda-files (list ,@akirak/org-reading-list-files)))))
#+end_src

My [[https://github.com/akirak/org-starter][org-starter]] package is used to define the agenda command, and I rely on =org-super-agenda= and =org-ql= packages by alphapapa.
I use =org-starter= extensively for configuring Org mode.
I must write tutorial posts on the package.

I also plan on adding another section for tracking research topics.
I am not a researcher, but topics/questions are a counterpart to sources in problem solving.
It may be useful to display both types of information in the same view.

While I was experimenting with this agenda command, I thought it would be convenient to let org-starter refresh the agenda buffer every time the agenda is redefined, so I implemented the feature: [[https://github.com/akirak/org-starter/compare/feature/refresh-agenda-buffer][feature/refresh-agenda-buffer]].
When you evaluate the agenda definition to update the definition, it refreshes an existing agenda buffer.
I will use this feature with a new =org-starter-override-agenda-window-setup= option set to =other-window=.
** 2019-10-12 Saturday
** 2019-10-07 Monday
*** Bold.el                    :Emacs:bold_el:new__package:LSP:programming:
:PROPERTIES:
:CREATED_TIME: [2019-10-07 Mon 03:29]
:END:

I've just created [[https://github.com/akirak/bold.el][bold.el]].
It can be configured like [[https://github.com/akirak/emacs.d/blob/maint/setup/setup-bold.el#L1][this]].
This is an attempt to provide a consistent set of keybindings across several programming languages by wrapping minor modes.

Language Server Protocol is supposed to serve the purpose, looks promising, and is already doing a good job for several programming languages.
However, in the Emacs world, =lsp-mode= is not the best solution for all languages.
I like =tide-mode= for TypeScript and =dante-mode= for Haskell than their LSP equivalents.
They provide partly the same features as =lsp-mode=, and I want to stick with the same keybindings whenever possible.
That is why I need to develop this wrapper package.

The package is all about muscle memory.
It doesn't provide any features in itself.
** 2019-10-05 Saturday
*** DONE Ivy-omni-org to Support Org-ql-view :Emacs:ivy_omni_org:org_ql:announcement:Org__mode:
CLOSED: [2019-10-05 Sat 22:36]
:PROPERTIES:
:CREATED_TIME: [2019-10-05 Sat 21:32]
:EXPORT_FILE_NAME: ivy-omni-org-to-integrate-with-org-ql-view.md
:EXPORT_HUGO_SLUG: ivy-omni-org-to-support-org-ql-view
:EXPORT_HUGO_CATEGORIES: "My Emacs packages"
:ID:       9d975aa0-ba66-4077-af60-7a4eddc54754
:END:

I am currently working on a feature for [[https://github.com/akirak/ivy-omni-org/][ivy-omni-org]] package to integrate with [[https://github.com/alphapapa/org-ql][org-ql]] package by alphapapa.

Ivy-omni-org is an [[https://github.com/abo-abo/swiper][Ivy]] interface which lets you choose an item from various sources on Org mode.
It currently supports the following content types:

- Org buffers
- Org files
- Org bookmarks
- Custom Org agenda commands

It also allows you to open a buffer/file/bookmark in another window/frame rather than in the current window by selecting an alternative action available from ~M-o~ key.

Org-ql is a library for searching Org entries with a query language based on S (lisp) expressions.
It also provides an alternative to =org-agenda= which lets you define agenda voews with the query language, and
=org-ql-view= library lets you manage bookmarks of such agenda views, like =org-agenda-custom-commands=.
=org-ql-view= is no more capable than =org-agenda=, but the query language is more intuitive to use than the string-based match expression syntax of =org-agenda=.

The new feature for =ivy-omni-org= lets you choose an agenda view of =org-ql-view=.
Since =org-ql-view= is an easier alternative to =org-agenda-custom-commands=, =ivy-omni-org= should provide an integration with the feature, so I implemented it.

[[https://raw.githubusercontent.com/akirak/emacs-config-library/screenshots/ivy-omni-org-with-org-ql-views.png]]

Actually, the upcoming feature is more generic: It allows you to define custom content types defined in terms of functions, and the integration with =org-ql-view= will be included in the package as an example of the customization.

The feature is not available in the master branch yet (nor from [[https://melpa.org/#/][MELPA]]) but in [[https://github.com/akirak/ivy-omni-org/tree/custom-types][this feature branch]].
Note that you can reorder the sections in =ivy-omni-org= by customizing =ivy-omni-org-content-types= to your liking.
The following is my current setup:

#+begin_src emacs-lisp
  (use-package ivy-omni-org
    :custom
    (ivy-omni-org-content-types '(agenda-commands
                                  org-ql-views
                                  buffers
                                  files
                                  bookmarks)))
#+end_src

* 2019-09
** 2019-09-29 Sunday
*** Hello
:PROPERTIES:
:CREATED_TIME: [2019-09-29 Sun 15:57]
:END:

This is the first post on my Emacs journal.
I will check how it is rendered on GitHub.
